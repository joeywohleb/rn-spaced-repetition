[
    {
        "name": "React Native",
        "flashcards": [
            {
                "name": "React Native",
                "front": "React Native",
                "back": "An open source cross platform framework for mobile development.",
                "order": 0
            },
            {
                "name": "Props",
                "front": "Props",
                "back": "Props are inputs to a React component. They are data passed down from a parent component to a child component. Props are readonly. They should not be modified in any way.",
                "order": 1
            },
            {
                "name": "State",
                "front": "State",
                "back": "A component needs state when some data associated with it changes over time. The most important difference between state and props is that props are passed from a parent component, but state is managed by the component itself. A component cannot change its props, but it can change its state.",
                "order": 2
            },
            {
                "name": "Elements",
                "front": "Elements",
                "back": "React elements are the building blocks of React applications. An element describes what you want to see on the screen. React elements are immutable.",
                "order": 3
            },
            {
                "name": "Components",
                "front": "Components",
                "back": "React components are small, reusable pieces of code that return a React element to be rendered to the page.",
                "order": 4
            },
            {
                "name": "props.children",
                "front": "props.children",
                "back": "props.children is available on every component. It contains the content between the opening and closing tags of a component.",
                "order": 5
            },
            {
                "name": "Lifecycle Methods",
                "front": "Lifecycle Methods",
                "back": "Lifecycle methods are custom functionality that gets executed during the different phases of a component.",
                "order": 6
            },
            {
                "name": "Controlled Components",
                "front": "Controlled Components",
                "back": "An input form element whose value is controlled by React",
                "order": 7
            },
            {
                "name": "Uncontrolled Components",
                "front": "Uncontrolled Components",
                "back": "When a user inputs data into a form control (an textinput, dropdown, etc) the updated information is reflected without React needing to do anything.",
                "order": 8
            },
            {
                "name": "Threads",
                "front": "What threads run in a React Native app?",
                "back": "UI, JS, Native Modules, and Render",
                "order": 9
            },
            {
                "name": "Separation of React Native",
                "front": "What are the three parts of React Native?",
                "back": "Native side, JS side, and Bridge",
                "order": 10
            },
            {
                "name": "Bridge",
                "front": "Bridge",
                "back": "It endorses the message broker role, handling asynchronous commands between the Javascript side and the Native side.",
                "order": 11
            },
            {
                "name": "Native Modules",
                "front": "Native Modules",
                "back": "Custom platform specific native code",
                "order": 12
            },
            {
                "name": "JSX",
                "front": "JSX",
                "back": "Javascript XML -- tag syntax similar to HTML",
                "order": 13
            },
            {
                "name": "render method",
                "front": "render()",
                "back": "The only required method in a class component. Examines this.props and this.state and returns react elements, arrays and fragments, portals, strings and numbers, booleans, or null.",
                "order": 14
            },
            {
                "name": "constructor method",
                "front": "constructor(props)",
                "back": "The constructor for a React component is called before it is mounted. Only used for initializing local state and binding event handler methods to an instance.",
                "order": 15
            }
        ]
    }
]
